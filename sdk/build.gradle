plugins {
    id 'com.jfrog.bintray' version '1.6'
}

apply plugin: 'com.android.library'
apply plugin: 'com.github.dcendents.android-maven'

ext {
    pkgGroupId = 'com.nestlabs'
    pkgVersion = '1.0.0'
    pkgName = 'android-sdk'
    pkgDesc = 'Nest Android SDK'
    githubRepo = 'github.com/nestlabs/android-sdk'
    pkgLicense = 'Apache-2.0'
    pkgLicenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    devInfo = {
        id 'ryanseys'
        name 'Ryan Seys'
        url 'https://github.com/ryanseys'
        email 'ryanseys@google.com'
    }
    bintrayUser = "$System.env.BINTRAY_USER"
    bintrayKey = "$System.env.BINTRAY_API_KEY"
    bintrayOrg = 'nestlabs'
    mavenUserToken = "$System.env.MAVEN_USER_TOKEN"
    mavenUserPass = "$System.env.MAVEN_USER_PASS"
    deployDryRun = false
}

group pkgGroupId
version pkgVersion
project.archivesBaseName = pkgName

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    resourcePrefix 'nest_'

    lintOptions {
      disable "InvalidPackage" // ignore complains about java.nio references
   }

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
        versionCode 1
        versionName pkgVersion

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testHandleProfiling true
        testFunctionalTest true

        consumerProguardFiles 'proguard-consumer-rules.pro'
    }

    buildTypes {
        debug {
            debuggable true
        }
        release {
            minifyEnabled false
        }
    }

    packagingOptions {
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests.returnDefaultValues = true
    }

    sourceSets { main { java.srcDirs = ['src/main/java'] } }
}

task androidJavadocs(type: Javadoc) {
    title "Nest Android SDK Documentation"
    options {
        links "https://docs.oracle.com/javase/7/docs/api/"
        linksOffline "https://developer.android.com/reference", "${android.sdkDirectory}/docs/reference"
    }
    options.encoding "utf-8"
    if (JavaVersion.current().isJava8Compatible()) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }

    exclude '**/BuildConfig.java'
    exclude '**/NestAuthActivity.java'
    exclude '**/R.java'
}

def githubUrl = 'https://' + githubRepo
def scmUrl = 'scm:git:git://' + githubRepo + '.git'

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

task javadocJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}

install {
    repositories.mavenInstaller {
        pom {
            project {
                packaging 'aar'
                artifactId pkgName
                version pkgVersion

                name pkgName
                description pkgDesc
                url githubUrl

                scm {
                    url githubUrl
                    connection scmUrl
                    developerConnection scmUrl
                }

                developers {
                    developer devInfo
                }

                licenses {
                    license {
                        name pkgLicense
                        url pkgLicenseUrl
                        distribution 'repo'
                    }
                }
            }
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    dryRun = deployDryRun // Whether to run this as dry-run, without deploying
    publish = true // If version should be auto published after an upload
    configurations = ['archives'] // Use the archives Configuration.

    pkg {
        repo = 'maven'
        name = pkgName
        userOrg = bintrayOrg != null && bintrayOrg != '' ? bintrayOrg : user
        licenses = [pkgLicense]
        publicDownloadNumbers = true
        vcsUrl = githubUrl + '.git'
        desc = pkgDesc
        websiteUrl = githubUrl
        issueTrackerUrl = githubUrl + '/issues'
        version {
            name = pkgVersion
            desc = pkgDesc
            vcsTag = pkgVersion
            released = new Date()
            gpg {
                sign = true // Determines whether to GPG sign the files.
            }
            mavenCentralSync {
                sync = false
                close = '0'
            }
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')

    testCompile 'junit:junit:4.12'
    testCompile 'org.robolectric:robolectric:3.0'
    testCompile 'com.squareup.okhttp3:mockwebserver:3.0.1'
    testCompile 'org.mockito:mockito-all:1.10.19'
    testCompile 'org.powermock:powermock-module-junit4:1.6.2'
    testCompile 'org.powermock:powermock-api-mockito:1.6.2'
    testCompile "org.powermock:powermock-module-junit4-rule:1.6.2"
    testCompile "org.powermock:powermock-api-mockito:1.6.2"
    testCompile "org.powermock:powermock-classloading-xstream:1.6.2"

    compile 'com.android.support:support-annotations:23.1.1'
    compile 'com.firebase:firebase-client-android:1.1.1'
    compile 'com.fasterxml.jackson.core:jackson-annotations:2.6.4'
    compile 'com.fasterxml.jackson.core:jackson-core:2.6.4'
    compile 'com.squareup.okhttp3:okhttp:3.0.1'
    compile 'org.apache.directory.studio:org.apache.commons.io:2.4'
}

android.libraryVariants.all { variant ->
    if (!variant.buildType.isDebuggable()) {
        def androidJavadocs = project.tasks['androidJavadocs']
        androidJavadocs.configure {
          classpath = variant.javaCompile.classpath + project.files(project.android.bootClasspath)
          source = variant.sourceSets.collect({it.javaDirectories}).flatten()
          dependsOn variant.javaCompile.dependsOn
        }
    }
}
